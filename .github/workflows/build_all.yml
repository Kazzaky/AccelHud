name: build

on: workflow_dispatch

jobs:
  windows_gcc:
    name: ${{ matrix.config }} Windows ${{ matrix.arch }}-bit (${{ matrix.c }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        config: [Release]
        arch: [32, 64]
        include:
          - arch: 32
            name: cgamex86
            msystem: MINGW32
            prefix: mingw-w64-i686
          - arch: 64
            name: cgamex86_64
            msystem: MINGW64
            prefix: mingw-w64-x86_64
          - c: clang
            cxx: clang++

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - uses: msys2/setup-msys2@v2
      with:
        install: ${{ matrix.prefix }}-cmake ${{ matrix.prefix }}-ninja ${{ matrix.prefix }}-${{ matrix.c }}
        msystem: ${{ matrix.msystem }}
        path-type: minimal
        release: false
        update: false

    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Configure
      run: cmake
        -S .
        -B build
        -G Ninja
        -DBINARY_NAME=${{ matrix.name }}
        -DCMAKE_BUILD_TYPE=${{ matrix.config }}
        -DCMAKE_C_FLAGS="${CMAKE_C_FLAGS} -m${{ matrix.arch }}"
        -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -m${{ matrix.arch }}"
        -DCMAKE_C_COMPILER=${{ matrix.c }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}

    - name: Build
      run: cmake --build build

    - name: Test
      working-directory: build/cgame_proxymod
      run: ctest --no-tests=error --output-on-failure

    - name: Install
      if: matrix.c == 'clang' && matrix.config == 'Release'
      run: cmake --install build --prefix bin --strip

    - uses: actions/upload-artifact@v4
      if: matrix.c == 'clang' && matrix.config == 'Release'
      with:
        name: ${{ matrix.name }}.dll
        path: bin/*.dll
        if-no-files-found: error
        retention-days: 5

  ubuntu:
    name: ${{ matrix.config }} Ubuntu ${{ matrix.arch }}-bit (${{ matrix.c }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config: [Release]
        arch: [32, 64]
        include:
          - arch: 32
            name: cgamei386
          - arch: 64
            name: cgamex86_64
          - c: clang
            cxx: clang++

    steps:
    - name: Install tools
      run: |
        sudo apt-get -qq update
        if [ ${{ matrix.arch }} -eq 32 ]; then
          sudo apt-get -y install gcc-multilib g++-multilib
        fi
        sudo apt-get -y install ninja-build
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Configure
      run: cmake
        -S .
        -B build
        -G Ninja
        -DBINARY_NAME=${{ matrix.name }}
        -DCMAKE_BUILD_TYPE=${{ matrix.config }}
        -DCMAKE_C_FLAGS="${CMAKE_C_FLAGS} -m${{ matrix.arch }}"
        -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -m${{ matrix.arch }}"
        -DCMAKE_C_COMPILER=${{ matrix.c }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}

    - name: Build
      run: cmake --build build

    - name: Test
      working-directory: build/cgame_proxymod
      run: ctest --no-tests=error --output-on-failure

    - name: Install
      if: matrix.c == 'clang' && matrix.config == 'Release'
      run: cmake --install build --prefix bin --strip

    - uses: actions/upload-artifact@v4
      if: matrix.c == 'clang' && matrix.config == 'Release'
      with:
        name: ${{ matrix.name }}.so
        path: bin/*.so
        if-no-files-found: error
        retention-days: 5

  macos:
    name: ${{ matrix.config }} macOS 64-bit (${{ matrix.c }})
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        config: [Release]
        include:
          - c: clang
            cxx: clang++

    steps:
    - name: Install tools
      run: |
        brew install ninja
        brew install binutils
        brew install llvm

    - name: Update compiler
      id: compiler
      run: |
        # see https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11-Readme.md#language-and-runtime
        # clang 13.0.0 hangs while building cg_vm.c (related to branching macro UOP()) => use clang 13.0.1 or higher
        echo "c_compiler=$(brew --prefix llvm)/bin/${{ matrix.c }}" >> $GITHUB_OUTPUT
        echo "cxx_compiler=$(brew --prefix llvm)/bin/${{ matrix.cxx }}" >> $GITHUB_OUTPUT
        echo "objcopy=$(brew --prefix binutils)/bin/objcopy" >> $GITHUB_OUTPUT

    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Configure
      run: cmake
        -S .
        -B build
        -G Ninja
        -DBINARY_NAME=cgamex86_64
        -DCMAKE_BUILD_TYPE=${{ matrix.config }}
        -DCMAKE_C_FLAGS="${CMAKE_C_FLAGS} -m64"
        -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} -m64"
        -DCMAKE_C_COMPILER=${{ steps.compiler.outputs.c_compiler }}
        -DCMAKE_CXX_COMPILER=${{ steps.compiler.outputs.cxx_compiler }}
        -DOBJCOPY_CMD=${{ steps.compiler.outputs.objcopy }}

    - name: Build
      run: cmake --build build

    - name: Test
      working-directory: build/cgame_proxymod
      run: ctest --no-tests=error --output-on-failure

    - name: Install
      if: matrix.c == 'clang' && matrix.config == 'Release'
      run: cmake --install build --prefix bin --strip

    - uses: actions/upload-artifact@v4
      if: matrix.c == 'clang' && matrix.config == 'Release'
      with:
        name: cgamex86_64.dylib
        path: bin/*.dylib
        if-no-files-found: error
        retention-days: 5
